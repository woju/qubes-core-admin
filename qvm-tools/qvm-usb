#!/usr/bin/python2
# -*- encoding: utf8 -*-
#
# The Qubes OS Project, http://www.qubes-os.org
#
# Copyright (C) 2010  Marek Marczykowski <marmarek@invisiblethingslab.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#

from qubes.qubes import QubesVmCollection, QubesException
from qubes.qubesutils import usb_list,usb_attach,usb_detach,usb_detach_all,usb_check_attached
from optparse import OptionParser
import sys
import os

pvusb_enable_flagfile = '/var/lib/qubes/pvusb-enable.flag'

def main():
    usage = "usage: %prog -l [options]\n"\
            "usage: %prog -a [options] <vm-name> <device-vm-name>:<device>\n"\
            "usage: %prog -d [options] <device-vm-name>:<device>\n"\
            "List/set VM USB devices."
#            "usage: %prog -d [options] <vm-name>\n"\

    parser = OptionParser (usage)
    parser.add_option ("-l", "--list", action="store_true", dest="do_list", default=False)
    parser.add_option ("-a", "--attach", action="store_true", dest="do_attach", default=False)
    parser.add_option ("-d", "--detach", action="store_true", dest="do_detach", default=False)
#    parser.add_option ("-f", "--frontend", dest="frontend", 
#                        help="Specify device id at destination VM [default: first unused]")
    parser.add_option ("--no-auto-detach", dest="auto_detach", action="store_false", default=True,
                        help="Fail when device already connected to other VM")
    parser.add_option ("--force-root", action="store_true", dest="force_root", default=False,
                       help="Force to run, even with root privileges")

    (options, args) = parser.parse_args ()

    if not os.path.exists(pvusb_enable_flagfile):
        print >> sys.stderr, ""
        print >> sys.stderr, "******* WARNING *** WARNING *** WARNING *** WARNING *******"
        print >> sys.stderr, "***                                                     ***"
        print >> sys.stderr, "*** PVUSB passthrough kernel support is still unstable. ***"
        print >> sys.stderr, "***                It can CRASH your VMs.               ***"
        print >> sys.stderr, "***                                                     ***"
        print >> sys.stderr, "***********************************************************"
        print >> sys.stderr, ""
        print >> sys.stderr, "To use it, you need install kernel from \"unstable\" repository"
        print >> sys.stderr, "If you still want to enable it, type capital YES"
        print >> sys.stderr, ""
        prompt = raw_input ("Do you want enable PV USB support? ")
        if prompt == "YES":
            open(pvusb_enable_flagfile, "w").close()
        else:
            exit(1)

    if hasattr(os, "geteuid") and os.geteuid() == 0:
        if not options.force_root:
            print >> sys.stderr, "*** Running this tool as root is strongly discouraged, this will lead you in permissions problems."
            print >> sys.stderr, "Retry as unprivileged user."
            print >> sys.stderr, "... or use --force-root to continue anyway."
            exit(1)

    if options.do_list + options.do_attach + options.do_detach > 1:
        print >> sys.stderr, "Only one of -l -a -d is allowed!"
        exit (1)

    if options.do_attach or options.do_detach:
        qvm_collection = QubesVmCollection()
        qvm_collection.lock_db_for_reading()
        qvm_collection.load()
        qvm_collection.unlock_db()

    if options.do_attach:
        if (len (args) != 2):
            parser.error ("You must provide vm name and device!")
        vm = qvm_collection.get_vm_by_name(args[0])
        if vm is None:
            parser.error ("Invalid VM name: %s" % args[0])

        # FIXME: here we assume that device is always in form "domain:dev", which can be changed in the future
        if args[1].find(":") < 0:
            parser.error ("Invalid device syntax: %s" % args[1])
        dev_list = usb_list()
        if not args[1] in dev_list.keys():
            parser.error ("Invalid device name: %s" % args[1])
        dev = dev_list[args[1]]
        backend_vm = qvm_collection.get_vm_by_name(dev['vm'])
        assert backend_vm is not None

        kwargs = {}
#        if options.frontend:
#            kwargs['frontend'] = options.frontend
        kwargs['auto_detach'] = options.auto_detach
        try:
            usb_attach(vm, backend_vm, dev['device'], **kwargs)
        except QubesException as e:
            print >> sys.stderr, "ERROR: %s" % str(e)
            sys.exit(1)
    elif options.do_detach:
        if (len (args) < 1):
            parser.error ("You must provide device or vm name!")
	if len(args) > 1:
            parser.error ("Too many parameters")
        # Check if provided name is VM
        vm = qvm_collection.get_vm_by_name(args[0])
        if vm is not None:
            #kwargs = {}
            #if options.frontend:
            #    kwargs['frontend'] = options.frontend
            #    usb_detach(vm, **kwargs)
            #else:
            usb_detach_all(vm)
        else:
            # Maybe usbvm:device?

	    # FIXME: nasty copy-paste from attach code half a page above
            # FIXME: here we assume that device is always in form "domain:dev", which can be changed in the future
            if args[0].find(":") < 0:
                parser.error ("Invalid device syntax: %s" % args[0])
            dev_list = usb_list()
            if not args[0] in dev_list.keys():
                parser.error ("Invalid device name: %s" % args[0])
            dev = dev_list[args[0]]
            backend_vm = qvm_collection.get_vm_by_name(dev['vm'])
            assert backend_vm is not None

            attached_to = usb_check_attached('', backend_vm.xid, dev['device'])
            if attached_to is None:
                print >> sys.stderr, "WARNING: Device not connected to any VM"
                exit(0)
            usb_detach(backend_vm, attached_to)
    else:
	if len(args) > 0:
            parser.error ("Too many parameters")
        # do_list
        for dev in usb_list().values():
            attached_to = usb_check_attached('', dev['xid'], dev['device'])
            attached_to_str = ""
            if attached_to:
                attached_to_str = " (attached to %s:%s)" % (attached_to['vm'], attached_to['frontend'])
            print "%s\t%s%s (USBv%s)" % (dev['name'], dev['desc'], attached_to_str, dev['usb_ver'])
        exit (0)

main()
